I"œ|<blockquote>
  <p>Jekyll is a static site generator. It takes text written in your favorite
markup language and uses layouts to create a static website. You can tweak the
site‚Äôs look and feel, URLs, the data displayed on the page, and more.</p>
</blockquote>

<h4 id="table-of-contents">Table of Contents:</h4>

<ol>
  <li><a href="#section1">What is Jekyll?</a></li>
  <li><a href="#section2">What does Jekyll do?</a></li>
</ol>

<h1 id="what-is-jekyll-">What is Jekyll? <a name="section1"></a></h1>

<p>Jekyll is a parsing engine bundled as a ruby gem used to build static websites from dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as ‚Äúa simple, blog aware, static site generator‚Äù.
<img src="https://camo.githubusercontent.com/60e48134345384c400adf3a210d1968644e387e0b6a64f5abca97b8340d02a87/687474703a2f2f692e696d6775722e636f6d2f576558466b576e2e6a7067" alt="Jekyll example" /></p>

<h1 id="what-does-jekyll-do-">What does Jekyll do? <a name="section2"></a></h1>

<p>Jekyll is installed as a ruby gem local computer. Once installed you can call jekyll serve in the terminal in a directory and provided that directory is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files, compute categories, tags, permalinks, and construct your pages from layout templates and partials.</p>

<p>Once parsed, Jekyll stores the result in a self-contained static _site folder. The intention here is that you can serve all contents in this folder statically from a plain static web-server.</p>

<p>You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags on each request, Jekyll does this once beforehand and caches the entire website in a folder for serving statically.</p>

<h1 id="jekyll-is-not-blogging-software">Jekyll is Not Blogging Software.<a name="section3"></a></h1>

<p><strong>Jekyll is a parsing engine.</strong></p>

<p>Jekyll does not come with any content nor does it have any templates or design elements. This is a common source of confusion when getting started. Jekyll does not come with anything you actually use or see on your website - you have to make it.</p>

<h1 id="why-should-i-use-jekyll-">Why should I use Jekyll? <a name="section4"></a></h1>

<p>Jekyll is very minimalistic and very efficient. The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server. Traditional dynamic blogs like Wordpress require a database and server-side code. Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.</p>

<p>Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.</p>

<p><strong>Developers like Jekyll because we can write content like we write code:</strong></p>

<ul>
  <li>Ability to write content in markdown or textile in your favorite text-editor.</li>
  <li>Ability to write and preview your content via localhost.</li>
  <li>No internet connection required.</li>
  <li>Ability to publish via git.</li>
  <li>Ability to host your blog on a static web-server.</li>
  <li>Ability to host freely on GitHub Pages.</li>
  <li>No database required.</li>
</ul>

<h1 id="installation-">Installation <a name="section5"></a></h1>

<p>First you need to install ruby on your machine. You can download it from this <a href="https://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-2.7.0-1/rubyinstaller-devkit-2.7.0-1-x64.exe">site</a> for (x64) and <a href="https://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-2.7.0-1/rubyinstaller-devkit-2.7.0-1-x86.exe">site</a> for (x86) (These sites are for Windows).</p>

<p>You can follow this video. Do not worry if the terminal shows error, just make sure that you follow the steps in video carefully and you can check the version successfully then it is good to go.</p>

<center>
  <iframe width="560" height="315" src="https://www.youtube.com/embed/LfP7Y9Ja6Qc?start=42" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</center>

<p>After successfully installing, you can create your blog by typing 03 commnands below sequentially.</p>

<ul>
  <li>Create a new Jekyll site at <em>./myblog</em></li>
</ul>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">jekyll new myblog
</span></code></pre></div></div>

<ul>
  <li>Change into your new directory</li>
</ul>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">cd myblog
</span></code></pre></div></div>

<ul>
  <li>Build the site and make it available on a local server.</li>
</ul>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">bundle exec jekyll serve
</span></code></pre></div></div>

<p>If you reach this step, and when you type on your browser <em>localhost:4000</em>, your browser shows up like image below then <strong>Congrats</strong>. You installed successfully!
<img src="https://docs.meca.in.th/assets/quickstartresult.jpg" alt="localhost:4000" /></p>

<p>Now, let‚Äôs explain what each folder in your Jekyll Blog does.</p>

<h1 id="how-jekyll-works">How Jekyll works:</h1>

<p>Jekyll expects your website directory to be laid out like so:</p>

<p><img src="/img/posts/jekyllguide/folder-structure.JPG" style="width: 40%; display: block; margin-left: auto; margin-right: auto;" alt="" /></p>

<p><strong>_config.yml</strong> Stores configuration data.</p>

<p><strong>_includes</strong> This folder is for partial views.</p>

<p><strong>_layouts</strong> This folder is for the main templates your content will be inserted into. You can have different layouts for different pages or page sections.</p>

<p><strong>_posts</strong> This folder contains your dynamic content/posts. the naming format is required to be @YEAR-MONTH-DATE-title.MARKUP@.</p>

<p><strong>_site</strong> This is where the generated site will be placed once Jekyll is done transforming it.</p>

<p><strong>assets</strong> This folder is not part of the standard jekyll structure. The assets folder represents any generic folder you happen to create in your root directory. Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.</p>

<p>(read more: <a href="http://jekyllrb.com/docs/usage/" target="_blank">http://jekyllrb.com/docs/usage/</a>)</p>

<p><strong>Jekyll Configuration</strong>
Jekyll supports various configuration options that are fully outlined here: <a href="http://jekyllrb.com/docs/configuration/" target="_blank">http://jekyllrb.com/docs/configuration/</a></p>

<h1 id="content-in-jekyll">Content in Jekyll</h1>

<p>Content in Jekyll is either a post or a page. These content ‚Äúobjects‚Äù get inserted into one or more templates to build the final output for its respective static-page.</p>

<p><strong>Posts and Pages</strong>
Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax. Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.</p>

<p><strong>Working With Posts</strong></p>

<p><strong>Creating a Post</strong>
Posts are created by properly formatting a file and placing it the _posts folder.</p>

<p><strong>Formatting</strong>
A post must have a valid filename in the form YEAR-MONTH-DATE-title.MARKUP and be placed in the _posts directory. If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file. Additionally, each file must have YAML Front-Matter prepended to its content. YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.</p>

<p><strong>Order</strong>
Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy. Only reverse chronological and chronological ordering is supported in Jekyll.</p>

<p>Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.</p>

<p><strong>Tags</strong>
Posts can have tags associated with them as part of their meta-data. Tags may be placed on posts by providing them in the post‚Äôs YAML front matter. You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.</p>

<p><strong>Categories</strong>
Posts may be categorized by providing one or more categories in the YAML front matter. Categories offer more significance over tags in that they can be reflected in the URL path to the given post. Note categories in Jekyll work in a specific way. If you define more than one category you are defining a category hierarchy ‚Äúset‚Äù. Example:</p>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
title: Hello World
categories: [lessons, beginner]
---
</code></pre></div></div>

<p>This defines the category hierarchy ‚Äúlessons/beginner‚Äù. Note this is one category node in Jekyll. You won‚Äôt find ‚Äúlessons‚Äù and ‚Äúbeginner‚Äù as two separate categories unless you define them elsewhere as singular categories.</p>

<p><strong>Working With Pages</strong></p>

<p><strong>Creating a Page</strong>
Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do not start with an underscore.</p>

<p><strong>Formatting</strong>
In order to register as a Jekyll page the file must contain YAML Front-Matter. Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the site.pages array for inclusion into your templates.</p>

<p><strong>Categories and Tags</strong>
Pages do not compute categories nor tags so defining them will have no effect.</p>

<p><strong>Sub-Directories</strong>
If pages are defined in sub-directories, the path to the page will be reflected in the url. Example:</p>

<p><img src="/img/posts/jekyllguide/working-with-pages.JPG" style="width:40%; display:block; margin-left:auto; margin-right:auto;" /></p>

<p>This page will be available at <code style="display: inline;">http://yourdomain.com/people/bob/essay.html</code></p>

<p><strong>Recommended Pages</strong></p>

<ul>
  <li><strong>index.html</strong>
You will always want to define the root index.html page as this will display on your root URL.</li>
  <li><strong>404.html</strong>
Create a root 404.html page and GitHub Pages will serve it as your 404 response.</li>
  <li><strong>sitemap.html</strong>
Generating a sitemap is good practice for SEO.</li>
  <li><strong>about.html</strong>
A nice about page is easy to do and gives the human perspective to your website.</li>
</ul>

<h1 id="templates-in-jekyll">Templates in Jekyll</h1>

<p>Templates are used to contain a page‚Äôs or post‚Äôs content. All templates have access to a global site object variable: <span style="color: #e83e8c;">site</span> as well as a page object variable: <span style="color: #e83e8c;">page</span>. The site variable holds all accessible content and metadata relative to the site. The page variable holds accessible data for the given page or post being rendered at that point.</p>

<p><strong>Create a Template</strong>
Templates are created by properly formatting a file and placing it in the <span style="color: #e83e8c;">_layouts</span> directory.</p>

<p><strong>Formatting</strong>
Templates should be coded in HTML and contain YAML Front Matter. All templates can contain Liquid code to work with your site‚Äôs data.</p>

<p><strong>Rending Page/Post Content in a Template</strong>
There is a special variable in all templates named : <span style="color: #e83e8c;">content</span>. The <span style="color: #e83e8c;">content</span> variable holds the page/post content including any sub-template content previously defined. Render the content variable wherever you want your main content to be injected into your template:</p>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<pre>
  <body>
    <div id="sidebar">...</div>
    <div id="main"><!-- Page Header -->

<header class="masthead" style="background-image: url('/img/posts/gitgithub/git-vs-github.png')">
  
    <div class="overlay"></div>
    <div class="container">
      <div class="row">
        <div class="col-lg-8 col-md-10 mx-auto">
          <div class="post-heading">
            <h1>Git and GitHub Guide</h1>
            
            <span class="meta">Posted by
              <a href="#"></a>
              on December 25, 2021 &middot; <span class="reading-time" title="Estimated read time">
  
   16 mins  read </span>

            </span>
          </div>
        </div>
      </div>
    </div>
  </header>

  <div class="container">
    <div class="row">
      <div class="col-lg-8 col-md-10 mx-auto">

        <h1 id="basic-git-and-github-guide">Basic Git and GitHub Guide</h1>

<hr />

<h4 id="table-of-contents">Table of Contents</h4>

<ol>
  <li><a href="#step1">Create a local git repository</a></li>
  <li><a href="#step2">Add a new file to the repo</a></li>
  <li><a href="#step3">Add a file to the staging environment</a></li>
  <li><a href="#step4">Create a commit</a></li>
  <li><a href="#step5">Create a new branch</a></li>
  <li><a href="#step6">Create a new repository on GitHub</a></li>
  <li><a href="#step7">Push a branch GitHub</a></li>
  <li><a href="#step8">Create a pull request</a></li>
  <li><a href="#step9">Merge a PR</a></li>
  <li><a href="#step10">Get changes on GitHub back to your computer</a></li>
  <li><a href="#step11">Bask in your git glory</a></li>
</ol>

<hr />

<p><img src="http://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/12/git-vs-github4.png" alt="GitandGitHub" /></p>

<blockquote>
  <p><strong>üìò</strong> Git and GitHub
A quick aside: <em>git</em> and <em>GitHub</em> are <strong>not</strong> the same things. Git is an open-source, version control tool created in 2005 by developers working on the Linux OS; GitHub is a company founded in 2008 that makes tools which integrate with git. You do not need GitHub to use git, but you cannot use GitHub without using git. There are many other alternatives to GitHub, such as GitLab, BitBucket,‚Ä¶ You do not need to use a remote to use git, but it will make sharing your code with others easier.</p>
</blockquote>

<h1 id="step-1-create-a-local-git-repository-">Step 1: Create a local git repository <a name="step1"></a></h1>

<p>When creating new project on your local machine using git, you‚Äôll first create a new repositori (repo). To begin, open up a terminal and move to where you want to place the project on you local machine. Then, run init command:</p>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">name@ubuntu:~$</span><span class="w"> </span><span class="nb">cd </span>myproject/
<span class="gp">name@ubuntu:~$</span><span class="w"> </span>git init
</code></pre></div></div>

<h1 id="step-2-add-a-new-file-to-the-repository-">Step 2: Add a new file to the repository <a name="step2"></a></h1>

<p>Go ahead and add some files in the folder. Once you have added or modified files in a folder containing a git repoo, git will notice that the file exists inside the repo. But, git won‚Äôt track the file unless you explicitly tell it to. Git only saves/manages changes to files that it tracks, so we will need to send a command to confirm that yes, want git to track our new file.</p>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">name@ubuntu:~$</span><span class="w"> </span><span class="nb">touch </span>file01.txt
</code></pre></div></div>

<p>You can git status command to see which files git knows exist</p>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">name@ubuntu:~$</span><span class="w"> </span>git status
</code></pre></div></div>

<blockquote>
  <h5 id="an-interlude-the-staging-environment-the-commit-and-you">An interlude: the staging environment, the commit, and you</h5>

  <p>One of the most confusing parts when you‚Äôre first learning git is the concept of the stagin environment and how it relates to a commit.<br />
A <em><strong>commit</strong></em> is a record of what changes you have made since the last time you made a commit. Commits make up the essence of your project and allow you to jump to the state of a project at any other commit. So, how do you tell git which files to put into a commit? This is where the staging environment or index come in. In Step 2, when you make changes to your repo, git notices that a file has changed but won‚Äôt do anything with it.<br />
To add a file to a commit, you first need to add it to the staging environment. To do this, you can use the <em>git add &lt; filename &gt;</em> command. One you‚Äôve used git add command to add all the files you want to the staging environment, you can then tell git to package them into a commit using the <em>git commit</em> command.</p>
</blockquote>

<h1 id="step-3-add-a-file-to-the-staging-environment-">Step 3: Add a file to the staging environment <a name="step3"></a></h1>

<p>Add a file to the staging environment using the git add command. if you rerun the git status command you will see that git has added the file to the staging environment.</p>

<p>Below is add a specific file.</p>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">name@ubuntu:~$</span><span class="w"> </span>git add file01.txt
</code></pre></div></div>

<p>or <em>git add .</em> to add all your files to the staging environment.</p>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">name@ubuntu:~$</span><span class="w"> </span>git add <span class="nb">.</span>
</code></pre></div></div>

<h1 id="step-4-create-a-commit-">Step 4: Create a commit <a name="step4"></a></h1>

<p>Run the command <em>git commit -m ‚Äúyour message‚Äù</em>. The message at the end of the commit should be something related to what the commit contains - maybe it‚Äôs a new feature, maybe it‚Äôs a bug fix, maybe it‚Äôs just fixing a typo. Commits live forever in a repository (technically you can delete them if you really, really need to but it‚Äôs messy), so if you leave a clear explanation of your changes it can be extremely helpful for future programmers (perhaps future you!) who are trying to figure out why some change was made years later.</p>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">name@ubuntu:~$</span><span class="w"> </span>git commit <span class="nt">-m</span> <span class="s2">"my first commit"</span>
</code></pre></div></div>

<h1 id="step-5-create-a-new-branch-">Step 5: Create a new branch <a name="step5"></a></h1>

<p>Say you want to make a new feature but are worried about making changes to the main project while developing the feature. This is where <em>git branches</em> come in.</p>

<p>Branches allow you to move back and forth between ‚Äòstates‚Äô of a project. For instance, if you want to add a new page to your website you can create a new branch just for that page without affecting the main part of the project. Once you‚Äôre done with the page, you can merge your changes from your branch into the primary branch. When you create a new branch, Git keeps track of which commit your branch ‚Äòbranched‚Äô off of, so it knows the history behind all the files.</p>

<p>Let‚Äôs say you are on the primary branch and want to create a new branch to develop your web page. Here‚Äôs what you‚Äôll do: Run <em>git checkout -b &lt; my branch name &gt;</em>. This command will automatically create a new branch and then ‚Äòcheck you out‚Äô on it, meaning git will move you to that branch, off of the primary branch.</p>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">name@ubuntu:~$</span><span class="w"> </span>git checkout <span class="nt">-b</span> testbranch
</code></pre></div></div>

<p>After running the above command, you can use the git branch command to confirm that your branch was created. The branch name with the <em>asterisk</em> next to it indicates which branch you‚Äôre on at that given time.</p>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">name@ubuntu:~$</span><span class="w"> </span>git branch
</code></pre></div></div>

<blockquote>
  <h5 id="a-note-on-branch-names">A note on branch names</h5>

  <p>By default, every git repository‚Äôs first branch is named <strong>master</strong> (and is typically used as the primary branch in the project). As part of the tech industry‚Äôs general anti-racism work, some groups have begun to use alternate names for the default branch (we are using ‚Äúprimary‚Äù in this tutorial, for example). In other documentation and discussions, you may see ‚Äúmaster‚Äù, or other terms, used to refer to the primary branch. Regardless of the name, just keep in mind that nearly every repository has a primary branch that can be thought of as the official version of the repository. If it‚Äôs a website, then the primary branch is the version that users see. If it‚Äôs an application, then the primary branch is the version that users download. This isn‚Äôt technically necessary (git doesn‚Äôt treat any branches differently from other branches), but it‚Äôs how git is traditionally used in a project. <br />
Now, if you switch back to the primary branch and make some more commits, your new branch won‚Äôt see any of those changes until you <em>merge</em> those changes onto your new branch.</p>
</blockquote>

<h1 id="step-6-create-a-new-repository-on-github-">Step 6: Create a new repository on GitHub <a name="step6"></a></h1>

<p>If you only want to keep track of your code locally, you don‚Äôt need to use GitHub. But if you want to work with a team, you can use GitHub to collaboratively modify the project‚Äôs code.</p>

<p>To create a new repo on GitHub, log in and go to the GitHub home page. You can find the ‚ÄúNew repository‚Äù option under the ‚Äú+‚Äù sign next to your profile picture, in the top right corner of the navbar:
<img src="/img/posts/gitgithub/github_step6_1.JPG" alt="create a new repo" />
After clicking the button, GitHub will ask you to name your repo and provide a brief description. When you‚Äôre done filling out the information, press the ‚ÄòCreate repository‚Äô button to make your new repo.
<img src="/img/posts/gitgithub/github_step6_2.JPG" alt="create a new repo" /></p>

<p>GitHub will ask if you want to create a new repo from scratch or if you want to add a repo you have created locally. In this case, since we‚Äôve already created a new repo locally, we want to push that onto GitHub so follow the ‚Äò‚Ä¶.or push an existing repository from the command line‚Äô section:</p>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">name@ubuntu:~$</span><span class="w"> </span>git remote add origin https://github.com/&lt;username&gt;/&lt;yourreponame&gt;.git
</code></pre></div></div>

<h1 id="step-7-push-a-branch-to-github-">Step 7: Push a branch to GitHub <a name="step7"></a></h1>

<p>Now we‚Äôll push the commit in your branch to your new GitHub repo. This allows other people to see the changes you‚Äôve made. If they‚Äôre approved by the repository‚Äôs owner, the changes can then be merged into the primary branch.</p>

<p>To push changes onto a new branch on GitHub, you‚Äôll want to run <em>git push origin yourbranchname</em>. GitHub will automatically create the branch for you on the remote repository:</p>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">name@ubuntu:~$</span><span class="w"> </span>git push origin &lt;your-branch-name&gt;
</code></pre></div></div>

<p>You might be wondering what that ‚Äúorigin‚Äù word means in the command above. What happens is that when you clone a remote repository to your local machine, git creates an alias for you. In nearly all cases this alias is called ‚Äúorigin.‚Äù It‚Äôs essentially shorthand for the remote repository‚Äôs URL. So, to push your changes to the remote repository, you could‚Äôve used either the command: git push git@github.com:git/git.git yourbranchname or git push origin yourbranchname</p>

<p><em>(If this is your first time using GitHub locally, it might prompt you to log in with your GitHub username and password.)</em></p>

<h1 id="step-8-create-a-pull-request-">Step 8: Create a pull request <a name="step8"></a></h1>

<p>A pull request (or PR) is a way to alert a repo‚Äôs owners that you want to make some changes to their code. It allows them to review the code and make sure it looks good before putting your changes on the primary branch.</p>

<p>This is what the PR page looks like before you‚Äôve submitted it:
<img src="https://product.hubspot.com/hs-fs/hubfs/Git_4.png?width=600&amp;name=Git_4.png" alt="pull request" /></p>

<p>And this is what it looks like once you‚Äôve submitted the PR request:
<img src="https://product.hubspot.com/hs-fs/hubfs/Git_5.png?width=600&amp;name=Git_5.png" alt="pull request" /></p>

<p>You might see a big green button at the bottom that says ‚ÄòMerge pull request‚Äô. Clicking this means you‚Äôll merge your changes into the primary branch..</p>

<p>Sometimes you‚Äôll be a co-owner or the sole owner of a repo, in which case you may not need to create a PR to merge your changes. However, it‚Äôs still a good idea to make one so you can keep a more complete history of your updates and to make sure you always create a new branch when making changes.</p>

<h1 id="step-9-merge-a-pr">Step 9: Merge a PR</h1>

<p>Go ahead and click the green ‚ÄòMerge pull request‚Äô button. This will merge your changes into the primary branch.
<img src="https://product.hubspot.com/hs-fs/hubfs/Git_6.png?width=600&amp;name=Git_6.png" alt="" /></p>

<p>When you‚Äôre done, I recommend deleting your branch (too many branches can become messy), so hit that grey ‚ÄòDelete branch‚Äô button as well.</p>

<p>You can double check that your commits were merged by clicking on the ‚ÄòCommits‚Äô link on the first page of your new repo.
<img src="https://product.hubspot.com/hs-fs/hubfs/Git_7.png?width=600&amp;name=Git_7.png" alt="" /></p>

<p>This will show you a list of all the commits in that branch. You can see the one I just merged right up top (Merge pull request #1).
<img src="https://product.hubspot.com/hs-fs/hubfs/Git_8.png?width=600&amp;name=Git_8.png" alt="" /></p>

<p>You can also see the hash code of the commit on the right hand side. A hash code is a unique identifier for that specific commit. It is useful for referring to specific commits and when undoing changes (use the <em>git revert <br />&lt; hash code number &gt;</em> command to backtrack).</p>

<h1 id="step-10-get-changes-on-github-back-to-your-computer-">Step 10: Get changes on GitHub back to your computer <a name="step10"></a></h1>

<p>Right now, the repo on GitHub looks a little different than what you have on your local machine. For example, the commit you made in your branch and merged into the primary branch doesn‚Äôt exist in the primary branch on your local machine.</p>

<p>In order to get the most recent changes that you or others have merged on GitHub, use the <em>git pull origin master</em> command (when working on the primary branch). In most cases, this can be shortened to ‚Äúgit pull‚Äù.</p>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">name@ubuntu:~$</span><span class="w"> </span>git pull origin master
</code></pre></div></div>

<p>This shows you all the files that have changed and how they‚Äôve changed.</p>

<p>Now we can use the <em>git log</em> command again to see all new commits.</p>

<p>(You may need to switch branches back to the primary branch. You can do that using the git checkout master command.)</p>

<h1 id="step-11-bask-in-your-git-glory-">Step 11: Bask in your git glory <a name="step11"></a></h1>

<p>You‚Äôve successfully made a PR and merged your code to the primary branch. Congratulations! If you‚Äôd like to dive deeper, check out these more advanced tutorials and resources:</p>

<p><a href="/resources" target="_blank">Resources</a></p>

<p><strong>Reference</strong>: <a href="https://product.hubspot.com/blog/git-and-github-tutorial-for-beginners" target="_blank">An Intro to Git and GitHub for Beginners (Tutorial)</a> by HubSpot Product Team on DEC 3, 2020</p>

<p><strong><em>Disclaimer</em></strong>: This content is for educational intention only.</p>


        <hr />

        <div class="clearfix">

          
          <a class="btn btn-primary float-left" href="/2021/12/24/roadmap.html" data-toggle="tooltip" data-placement="top" title="Project Roadmap">&larr; Previous<span class="d-none d-md-inline">
              Post</span></a>
          
          
          <a class="btn btn-primary float-right" href="/jekyll-guide" data-toggle="tooltip" data-placement="top" title="Jekyll Guide">Next<span class="d-none d-md-inline">
              Post</span> &rarr;</a>
          

        </div>

      </div>
    </div>
  </div>
</div>
  </body>
</pre>

<p><strong>Reference</strong>:</p>

<ol>
  <li><a href="https://jekyllrb.com/docs/" target="_blank">Jekyll Docs Quickstart</a></li>
  <li><a href="http://jekyllbootstrap.com/lessons/jekyll-introduction.html" target="_blank">http://jekyllbootstrap.com/lessons/jekyll-introduction.html</a></li>
</ol>
:ET