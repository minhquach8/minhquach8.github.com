I"∞%<blockquote>
  <p>Jekyll is a static site generator. It takes text written in your favorite
markup language and uses layouts to create a static website. You can tweak the
site‚Äôs look and feel, URLs, the data displayed on the page, and more.</p>
</blockquote>

<h4 id="table-of-contents">Table of Contents:</h4>

<ol>
  <li><a href="#section1">What is Jekyll?</a></li>
  <li><a href="#section2">What does Jekyll do?</a></li>
</ol>

<h1 id="what-is-jekyll-">What is Jekyll? <a name="section1"></a></h1>

<p>Jekyll is a parsing engine bundled as a ruby gem used to build static websites from dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as ‚Äúa simple, blog aware, static site generator‚Äù.
<img src="https://camo.githubusercontent.com/60e48134345384c400adf3a210d1968644e387e0b6a64f5abca97b8340d02a87/687474703a2f2f692e696d6775722e636f6d2f576558466b576e2e6a7067" alt="Jekyll example" /></p>

<h1 id="what-does-jekyll-do-">What does Jekyll do? <a name="section2"></a></h1>

<p>Jekyll is installed as a ruby gem local computer. Once installed you can call jekyll serve in the terminal in a directory and provided that directory is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files, compute categories, tags, permalinks, and construct your pages from layout templates and partials.</p>

<p>Once parsed, Jekyll stores the result in a self-contained static _site folder. The intention here is that you can serve all contents in this folder statically from a plain static web-server.</p>

<p>You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags on each request, Jekyll does this once beforehand and caches the entire website in a folder for serving statically.</p>

<h1 id="jekyll-is-not-blogging-software">Jekyll is Not Blogging Software.<a name="section3"></a></h1>

<p><strong>Jekyll is a parsing engine.</strong></p>

<p>Jekyll does not come with any content nor does it have any templates or design elements. This is a common source of confusion when getting started. Jekyll does not come with anything you actually use or see on your website - you have to make it.</p>

<h1 id="why-should-i-use-jekyll-">Why should I use Jekyll? <a name="section4"></a></h1>

<p>Jekyll is very minimalistic and very efficient. The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server. Traditional dynamic blogs like Wordpress require a database and server-side code. Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.</p>

<p>Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.</p>

<p><strong>Developers like Jekyll because we can write content like we write code:</strong></p>

<ul>
  <li>Ability to write content in markdown or textile in your favorite text-editor.</li>
  <li>Ability to write and preview your content via localhost.</li>
  <li>No internet connection required.</li>
  <li>Ability to publish via git.</li>
  <li>Ability to host your blog on a static web-server.</li>
  <li>Ability to host freely on GitHub Pages.</li>
  <li>No database required.</li>
</ul>

<h1 id="installation-">Installation <a name="section5"></a></h1>

<p>First you need to install ruby on your machine. You can download it from this <a href="https://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-2.7.0-1/rubyinstaller-devkit-2.7.0-1-x64.exe">site</a> for (x64) and <a href="https://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-2.7.0-1/rubyinstaller-devkit-2.7.0-1-x86.exe">site</a> for (x86) (These sites are for Windows).</p>

<p>You can follow this video. Do not worry if the terminal shows error, just make sure that you follow the steps in video carefully and you can check the version successfully then it is good to go.</p>

<center>
  <iframe width="560" height="315" src="https://www.youtube.com/embed/LfP7Y9Ja6Qc?start=42" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</center>

<p>After successfully installing, you can create your blog by typing 03 commnands below sequentially.</p>

<ul>
  <li>Create a new Jekyll site at <em>./myblog</em></li>
</ul>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">jekyll new myblog
</span></code></pre></div></div>

<ul>
  <li>Change into your new directory</li>
</ul>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">cd myblog
</span></code></pre></div></div>

<ul>
  <li>Build the site and make it available on a local server.</li>
</ul>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">bundle exec jekyll serve
</span></code></pre></div></div>

<p>If you reach this step, and when you type on your browser <em>localhost:4000</em>, your browser shows up like image below then <strong>Congrats</strong>. You installed successfully!
<img src="https://docs.meca.in.th/assets/quickstartresult.jpg" alt="localhost:4000" /></p>

<p>Now, let‚Äôs explain what each folder in your Jekyll Blog does.</p>

<h1 id="how-jekyll-works">How Jekyll works:</h1>

<p>Jekyll expects your website directory to be laid out like so:</p>

<p><img src="/img/posts/jekyllguide/folder-structure.JPG" style="width: 40%; display: block; margin-left: auto; margin-right: auto;" alt="" /></p>

<p><strong>_config.yml</strong> Stores configuration data.</p>

<p><strong>_includes</strong> This folder is for partial views.</p>

<p><strong>_layouts</strong> This folder is for the main templates your content will be inserted into. You can have different layouts for different pages or page sections.</p>

<p><strong>_posts</strong> This folder contains your dynamic content/posts. the naming format is required to be @YEAR-MONTH-DATE-title.MARKUP@.</p>

<p><strong>_site</strong> This is where the generated site will be placed once Jekyll is done transforming it.</p>

<p><strong>assets</strong> This folder is not part of the standard jekyll structure. The assets folder represents any generic folder you happen to create in your root directory. Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.</p>

<p>(read more: <a href="http://jekyllrb.com/docs/usage/" target="_blank">http://jekyllrb.com/docs/usage/</a>)</p>

<p><strong>Jekyll Configuration</strong>
Jekyll supports various configuration options that are fully outlined here: <a href="http://jekyllrb.com/docs/configuration/" target="_blank">http://jekyllrb.com/docs/configuration/</a></p>

<h1 id="content-in-jekyll">Content in Jekyll</h1>

<p>Content in Jekyll is either a post or a page. These content ‚Äúobjects‚Äù get inserted into one or more templates to build the final output for its respective static-page.</p>

<p>Posts and Pages
Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax. Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.</p>

<p>Working With Posts
Creating a Post
Posts are created by properly formatting a file and placing it the _posts folder.</p>

<p>Formatting
A post must have a valid filename in the form YEAR-MONTH-DATE-title.MARKUP and be placed in the _posts directory. If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file. Additionally, each file must have YAML Front-Matter prepended to its content. YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.</p>

<p>Order
Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy. Only reverse chronological and chronological ordering is supported in Jekyll.</p>

<p>Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.</p>

<p>Tags
Posts can have tags associated with them as part of their meta-data. Tags may be placed on posts by providing them in the post‚Äôs YAML front matter. You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.</p>

<p><strong>Categories</strong>
Posts may be categorized by providing one or more categories in the YAML front matter. Categories offer more significance over tags in that they can be reflected in the URL path to the given post. Note categories in Jekyll work in a specific way. If you define more than one category you are defining a category hierarchy ‚Äúset‚Äù. Example:</p>

<p><strong>Reference</strong>:</p>

<ol>
  <li><a href="https://jekyllrb.com/docs/" target="_blank">Jekyll Docs Quickstart</a></li>
  <li><a href="http://jekyllbootstrap.com/lessons/jekyll-introduction.html" target="_blank">http://jekyllbootstrap.com/lessons/jekyll-introduction.html</a></li>
</ol>
:ET