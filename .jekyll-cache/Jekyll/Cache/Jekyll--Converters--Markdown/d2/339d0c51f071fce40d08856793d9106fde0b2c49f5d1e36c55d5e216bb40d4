I"Ñ)<h1 id="basic-git-and-github-guide">Basic Git and Github Guide</h1>

<hr />

<h4 id="table-of-contents">Table of Contents</h4>

<ol>
  <li><a href="#step1">Create a local git repository</a></li>
  <li><a href="#step2">Add a new file to the repo</a></li>
  <li><a href="#step3">Add a file to the staging environment</a></li>
  <li><a href="#step4">Create a commit</a></li>
  <li><a href="#step5">Create a new branch</a></li>
  <li><a href="#step6">Create a new repository on GitHub</a></li>
  <li><a href="#step7">Push a branch Github</a></li>
  <li><a href="#step8">Create a pull request</a></li>
  <li><a href="#step9">Merge a PR</a></li>
  <li><a href="#step10">Get changes on GitHub back to your computer</a></li>
  <li><a href="#step11">Bask in your git glory</a></li>
</ol>

<hr />

<p><img src="http://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/12/git-vs-github4.png" alt="GitandGithub" /></p>

<blockquote>
  <p><strong>üìò</strong> Git and Github
A quick aside: <em>git</em> and <em>Github</em> are <strong>not</strong> the same things. Git is an open-source, version control tool created in 2005 by developers working on the Linux OS; Github is a company founded in 2008 that makes tools which integrate with git. You do not need Github to use git, but you cannot use Github without using git. There are many other alternatives to Github, such as GitLab, BitBucket,‚Ä¶ You do not need to use a remote to use git, but it will make sharing your code with others easier.</p>
</blockquote>

<h2 id="step-1-create-a-local-git-repository-">Step 1: Create a local git repository <a name="step1"></a></h2>

<p>When creating new project on your local machine using git, you‚Äôll first create a new repositori (repo). To begin, open up a terminal and move to where you want to place the project on you local machine. Then, run init command:</p>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">name@ubuntu:~$</span><span class="w"> </span><span class="nb">cd </span>myproject/
<span class="gp">name@ubuntu:~$</span><span class="w"> </span>git init
</code></pre></div></div>

<h2 id="step-2-add-a-new-file-to-the-repository-">Step 2: Add a new file to the repository <a name="step2"></a></h2>

<p>Go ahead and add some files in the folder. Once you have added or modified files in a folder containing a git repoo, git will notice that the file exists inside the repo. But, git won‚Äôt track the file unless you explicitly tell it to. Git only saves/manages changes to files that it tracks, so we will need to send a command to confirm that yes, want git to track our new file.</p>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">name@ubuntu:~$</span><span class="w"> </span><span class="nb">touch </span>file01.txt
</code></pre></div></div>

<p>You can git status command to see which files git knows exist</p>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">name@ubuntu:~$</span><span class="w"> </span>git status
</code></pre></div></div>

<blockquote>
  <h5 id="an-interlude-the-staging-environment-the-commit-and-you">An interlude: the staging environment, the commit, and you</h5>

  <p>One of the most confusing parts when you‚Äôre first learning git is the concept of the stagin environment and how it relates to a commit.<br />
A <em><strong>commit</strong></em> is a record of what changes you have made since the last time you made a commit. Commits make up the essence of your project and allow you to jump to the state of a project at any other commit. So, how do you tell git which files to put into a commit? This is where the staging environment or index come in. In Step 2, when you make changes to your repo, git notices that a file has changed but won‚Äôt do anything with it.<br />
To add a file to a commit, you first need to add it to the staging environment. To do this, you can use the <em>git add &lt; filename &gt;</em> command. One you‚Äôve used git add command to add all the files you want to the staging environment, you can then tell git to package them into a commit using the <em>git commit</em> command.</p>
</blockquote>

<h2 id="step-3-add-a-file-to-the-staging-environment-">Step 3: Add a file to the staging environment <a name="step3"></a></h2>

<p>Add a file to the staging environment using the git add command. if you rerun the git status command you will see that git has added the file to the staging environment.</p>

<p>Below is add a specific file.</p>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">name@ubuntu:~$</span><span class="w"> </span>git add file01.txt
</code></pre></div></div>

<p>or <em>git add .</em> to add all your files to the staging environment.</p>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">name@ubuntu:~$</span><span class="w"> </span>git add <span class="nb">.</span>
</code></pre></div></div>

<h2 id="step-4-create-a-commit-">Step 4: Create a commit <a name="step4"></a></h2>

<p>Run the command <em>git commit -m ‚Äúyour message‚Äù</em>. The message at the end of the commit should be something related to what the commit contains - maybe it‚Äôs a new feature, maybe it‚Äôs a bug fix, maybe it‚Äôs just fixing a typo. Commits live forever in a repository (technically you can delete them if you really, really need to but it‚Äôs messy), so if you leave a clear explanation of your changes it can be extremely helpful for future programmers (perhaps future you!) who are trying to figure out why some change was made years later.</p>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">name@ubuntu:~$</span><span class="w"> </span>git commit <span class="nt">-m</span> <span class="s2">"my first commit"</span>
</code></pre></div></div>

<h2 id="step-5-create-a-new-branch-">Step 5: Create a new branch <a name="step5"></a></h2>

<p>Say you want to make a new feature but are worried about making changes to the main project while developing the feature. This is where <em>git branches</em> come in.</p>

<p>Branches allow you to move back and forth between ‚Äòstates‚Äô of a project. For instance, if you want to add a new page to your website you can create a new branch just for that page without affecting the main part of the project. Once you‚Äôre done with the page, you can merge your changes from your branch into the primary branch. When you create a new branch, Git keeps track of which commit your branch ‚Äòbranched‚Äô off of, so it knows the history behind all the files.</p>

<p>Let‚Äôs say you are on the primary branch and want to create a new branch to develop your web page. Here‚Äôs what you‚Äôll do: Run <em>git checkout -b &lt; my branch name &gt;</em>. This command will automatically create a new branch and then ‚Äòcheck you out‚Äô on it, meaning git will move you to that branch, off of the primary branch.</p>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">name@ubuntu:~$</span><span class="w"> </span>git checkout <span class="nt">-b</span> testbranch
</code></pre></div></div>

<p>After running the above command, you can use the git branch command to confirm that your branch was created. The branch name with the <em>asterisk</em> next to it indicates which branch you‚Äôre on at that given time.</p>

<div class="code-header">
	<button class="copy-code-button" aria-label="Copy code to clipboard"></button>
</div>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">name@ubuntu:~$</span><span class="w"> </span>git branch
</code></pre></div></div>

<blockquote>
  <h5 id="a-note-on-branch-names">A note on branch names</h5>

  <p>By default, every git repository‚Äôs first branch is named <strong>master</strong> (and is typically used as the primary branch in the project). As part of the tech industry‚Äôs general anti-racism work, some groups have begun to use alternate names for the default branch (we are using ‚Äúprimary‚Äù in this tutorial, for example). In other documentation and discussions, you may see ‚Äúmaster‚Äù, or other terms, used to refer to the primary branch. Regardless of the name, just keep in mind that nearly every repository has a primary branch that can be thought of as the official version of the repository. If it‚Äôs a website, then the primary branch is the version that users see. If it‚Äôs an application, then the primary branch is the version that users download. This isn‚Äôt technically necessary (git doesn‚Äôt treat any branches differently from other branches), but it‚Äôs how git is traditionally used in a project. <br />
Now, if you switch back to the primary branch and make some more commits, your new branch won‚Äôt see any of those changes until you <em>merge</em> those changes onto your new branch.</p>
</blockquote>

<h2 id="step-6-create-a-new-repository-on-github-">Step 6: Create a new repository on GitHub <a name="step6"></a></h2>

<p>If you only want to keep track of your code locally, you don‚Äôt need to use GitHub. But if you want to work with a team, you can use GitHub to collaboratively modify the project‚Äôs code.</p>

<p>To create a new repo on GitHub, log in and go to the GitHub home page. You can find the ‚ÄúNew repository‚Äù option under the ‚Äú+‚Äù sign next to your profile picture, in the top right corner of the navbar:
<img src="/img/posts/gitgithub/github_step6_1." alt="create a new repo" />
<img src="/img/posts/gitgithub/github_step6_1.J" alt="create a new repo" /></p>
:ET